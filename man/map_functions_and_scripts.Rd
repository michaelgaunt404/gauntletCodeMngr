% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_functions_and_scripts.R
\name{map_functions_and_scripts}
\alias{map_functions_and_scripts}
\title{Map Functions and Scripts in an R Package}
\usage{
map_functions_and_scripts(function_directory, code_directory = NULL)
}
\arguments{
\item{function_directory}{Character. Path to the directory containing R scripts with function definitions (e.g., \code{R} directory in an R package).}

\item{code_directory}{Character. Path to the directory containing other R scripts (e.g., \code{inst/scripts} directory). Default is \code{NULL}.}
}
\value{
A list with two elements:
\describe{
\item{\code{vis_plot}}{An interactive network plot showing the relationships between functions and scripts.}
\item{\code{df_to_from}}{A data frame mapping function-to-function and function-to-script relationships.}
}
}
\description{
This function analyzes R scripts within two directories: a function directory (e.g., \code{R} folder for an R package) and an optional code directory (e.g., \code{inst/scripts} folder). It maps the relationships between functions and scripts, visualizing the connections in a network diagram and providing a data frame of function calls.
}
\details{
The function performs the following steps:
\enumerate{
\item Scans the \code{function_directory} to identify R scripts and extracts all defined functions.
\item Optionally scans the \code{code_directory} for additional scripts.
\item Maps function calls within and across scripts, creating a data frame of relationships.
\item Visualizes the relationships in an interactive network plot using \pkg{visNetwork}.
}

The function can be used to understand code dependencies, identify potential redundancies, and visualize how functions and scripts interact within a project.
}
\note{
This function assumes that R scripts in the \code{function_directory} contain properly defined functions, and that scripts in the \code{code_directory} may invoke these functions.
}
\examples{
\dontrun{

Create a temporary project directory
project_dir <- tempfile("r_project_")
dir.create(project_dir)
cat("Project directory created at:", project_dir, "\n")

# Create subdirectories: "R" for functions and "code" for scripts
function_dir = file.path(project_dir, "R")
dir.create(function_dir)
code_dir = file.path(project_dir, "code")
dir.create(code_dir)

# -------------------------
# Create custom function files in the R folder
# File: func1.R - returns a random number
func1_code <- '
get_random_number <- function() {
  # Return a random integer between 1 and 100
  sample(1:100, 1)
}

writeLines(func1_code, con = file.path(project_dir, "R", "func1.R"))

# File: func2.R - uses get_random_number to return double the value
func2_code <- '
# Source the first function
source("func1.R")
get_double_random <- function() {
  num <- get_random_number()
  num * 2
}

writeLines(func2_code, con = file.path(project_dir, "R", "func2.R"))


# File: func3.R - uses get_random_number to return double the value
func3_code <- '
# Source the first function
print_hello_world <- function() {
  print("hello world!")
}

writeLines(func3.R, con = file.path(project_dir, "R", "func3.R"))

# -------------------------
# Create an R script in the code folder that uses the custom functions
# File: run_script.R - sources func2.R and prints the result
script_code <- '
# Source the custom functions from the R directory
source("../R/func2.R")

# Use the function and print the result
result <- get_double_random()
cat("Double random number:", result, "\n")

writeLines(script_code, con = file.path(project_dir, "code", "run_script.R"))

cat("Temporary R project structure has been set up.\n")

map_functions_and_scripts(function_directory = function_dir, code_directory = code_dir)


}
}
